{"version":3,"sources":["store/store.js","components/Header/Header.js","components/Searchbar/Searchbar.js","components/RepoList/RepoList.js","graphql/queryGithub.js","App.js","serviceWorker.js","index.js"],"names":["initialState","data","name","bio","avatarUrl","company","email","repositories","nodes","filtered","loading","store","createContext","Provider","StateProvider","children","useReducer","state","action","type","payload","Error","dispatch","value","Header","useContext","className","src","alt","Searchbar","globalState","stableDispatch","useCallback","useState","setState","filterResults","term","newList","filter","repo","includes","onChange","e","target","RepoList","useEffect","fetch","method","headers","Authorization","body","JSON","stringify","query","then","res","json","console","log","user","catch","error","length","map","index","key","href","url","rel","description","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cd73ffd3.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\r\n\r\nconst initialState = {\r\n    data:\r\n       {\r\n            name: \"\",\r\n            bio: \"\",\r\n            avatarUrl: \"\",\r\n            company: \"\",\r\n            email: \"\",\r\n            repositories: {\r\n                nodes: []\r\n            }\r\n\r\n    },\r\n    filtered: [],\r\n    loading: true\r\n};\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer((state, action) => {\r\n        switch (action.type) {\r\n            case 'GET_GITHUB_DATA':\r\n                return {\r\n                    ...state,\r\n                    data: action.payload,\r\n                    filtered: action.payload.repositories.nodes,\r\n                    loading: false\r\n                };\r\n            case 'FILTER_SEARCH':\r\n                return {\r\n                    ...state,\r\n                    filtered: action.payload,\r\n                    loading: false\r\n                };\r\n\r\n            default:\r\n                throw new Error();\r\n        };\r\n    }, initialState);\r\n\r\n    return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider }","import React, { useContext } from 'react'\r\nimport { store } from '../../store/store'\r\nimport \"./header.css\"\r\n\r\nfunction Header() {\r\n  const globalState = useContext(store)\r\n\r\nconst state = globalState.state.data\r\n\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h1>Github repo search</h1>\r\n      <div className=\"avatar\"> \r\n        <img src={state.avatarUrl} alt={state.name}/>\r\n      </div>\r\n      <div className=\"profile\">\r\n        <p className= \"name\">{state.name}</p>\r\n        <p>{state.bio}</p>\r\n        <p>{state.email}</p>\r\n        <p>{state.company}</p>\r\n      </div>\r\n\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { useContext, useState, useCallback } from 'react'\r\nimport { store } from '../../store/store'\r\nimport './Searchbar.css'\r\n\r\nfunction Searchbar() {\r\n\r\n    const globalState = useContext(store);\r\n    const { dispatch } = globalState;\r\n    const stableDispatch = useCallback(dispatch, [])\r\n\r\n    const [state, setState] = useState({ value: \"\" })\r\n    const handleChange = (e) => {\r\n        setState({ value: e.target.value })\r\n        filterResults(e.target.value)\r\n    }\r\n    const filterResults = (term) => {\r\n\r\n        let newList = globalState.state.data.repositories.nodes.filter(repo => {\r\n            return repo.name.includes(term)\r\n        })\r\n        stableDispatch({ type: \"FILTER_SEARCH\", payload:  newList  })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"searchbar\">\r\n            <input className=\"searchbar-input\"\r\n                type=\"text\"\r\n                value={state.value}\r\n                onChange={handleChange}\r\n            >\r\n\r\n            </input>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbar;\r\n","import React, { useContext, useEffect, useCallback } from 'react'\r\nimport { store } from '../../store/store'\r\nimport { QUERY_GITHUB } from '../../graphql/queryGithub'\r\n\r\nimport './RepoList.css'\r\nfunction RepoList() {\r\n\r\n    const globalState = useContext(store);\r\n    const { dispatch } = globalState;\r\n    const stableDispatch = useCallback(dispatch, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetch('https://api.github.com/graphql', {\r\n            method: 'POST',\r\n            headers: {\r\n                Authorization: `bearer a0273b4a5e163db415b3f976ee7b01fefe97d52e`\r\n            },\r\n            body: JSON.stringify({ query: QUERY_GITHUB })\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(\"Data\", data)\r\n\r\n                stableDispatch({ type: \"GET_GITHUB_DATA\", payload: data.data.user })\r\n            })\r\n            .catch(error => console.log(error))\r\n    }, [stableDispatch])\r\n\r\n\r\n    return (\r\n        <>\r\n            {globalState.state.filtered.length > 0 ?\r\n                globalState.state.filtered.map((data, index) => {\r\n                    return (\r\n                        <div key={index} className=\"repos\" >\r\n                            <div className=\"link\">\r\n                                <a href={data.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <div className=\"name\">\r\n                                    {data.name}\r\n                                </div>\r\n                                <div className=\"description\"\r\n                                >\r\n                                    {data.description}\r\n                                </div>\r\n                            </a>\r\n                            </div>\r\n\r\n\r\n                        </ div >\r\n                    )\r\n                })\r\n                : <div className=\"noMatch\"> \"No repositories match\" </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RepoList;","export const QUERY_GITHUB = `\r\nquery repo {\r\n    user(login: \"martinrebo\") {\r\n      name\r\n      bio\r\n      avatarUrl\r\n      company\r\n      email\r\n      repositories(first: 50) {\r\n          nodes {\r\n            name\r\n            description\r\n            createdAt\r\n            resourcePath\r\n            url\r\n          }\r\n      }\r\n    }\r\n  }\r\n  \r\n`\r\n","import React from 'react';\nimport { StateProvider } from './store/store'\n\nimport './App.css';\n\nimport Header from './components/Header/Header'\nimport Searchbar from './components/Searchbar/Searchbar';\nimport RepoList from './components/RepoList/RepoList';\n\nfunction App() {\n\n  // \n\n  return (\n    <div className=\"App\">\n      <StateProvider >\n        <Header />\n        <Searchbar />\n        <RepoList />\n      </StateProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}